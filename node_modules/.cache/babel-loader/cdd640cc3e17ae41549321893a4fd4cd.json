{"ast":null,"code":"var _jsxFileName = \"/Users/philipsterling/flatiron/Mod4/Week-11/TaBTypeRacer/tab-type-racer-front-end/src/containers/GameContainer.js\";\nimport React from \"react\";\nimport Nav from './Nav';\nimport \"../css/gamecontainer.css\";\nimport { Route, Redirect } from 'react-router';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {};\n\n    this.handleChange = e => {\n      let percentage = this.state.percentage;\n      let input = e.target.value;\n      let index = input.length - 1;\n\n      if (this.state.allWords[0] !== undefined) {\n        this.setState({\n          currentWord: this.state.allWords[0] + \" \"\n        });\n\n        if (index !== -1) {\n          if (input != \"\") {\n            if (this.state.allWords[0].charAt(index) != input.charAt(input.length - 1) && input != this.state.allWords[0] + \" \") {\n              if (!this.state.wordFlag) {\n                this.setState({\n                  errorNumber: ++this.state.errorNumber,\n                  wordFlag: true,\n                  currWordCorrect: \"red\"\n                });\n              }\n            }\n          }\n        }\n\n        if (input == this.state.allWords[0] + \" \" || this.state.allWords.length == 1 && input == this.state.allWords[0]) {\n          this.state.finishedWords.push(this.state.allWords.shift() + \" \");\n          let newCurrent;\n\n          if (this.state.allWords.length == 0) {\n            newCurrent = \" \";\n          } else {\n            newCurrent = this.state.allWords[0] + \" \";\n          }\n\n          this.setState({\n            renderRemainingWords: this.state.allWords.map((word, index) => {\n              if (index != 0) {\n                return word + \" \";\n              }\n            }),\n            currentWord: newCurrent\n          });\n          percentage = Math.floor((this.state.numAllWords - this.state.allWords.length) / this.state.numAllWords * 104);\n          console.log(percentage);\n          this.setState({\n            allWords: this.state.allWords,\n            wordFlag: false,\n            currWordCorrect: \"yellow\"\n          });\n          input = \"\";\n          index = -1;\n        }\n\n        if (this.state.allWords[0] !== undefined) {\n          this.setState({\n            input,\n            index,\n            characAt: this.state.allWords[0].charAt(index),\n            percentage\n          });\n        }\n      }\n\n      if (this.state.allWords.length == 0 && this.state.gameID != null) {\n        this.finishGame();\n      }\n    };\n\n    this.finishGame = () => {\n      let perRight = 100 - this.state.errorNumber / this.state.numAllWords * 100;\n      this.setState({\n        input: \"\",\n        challenge: \"\"\n      });\n      fetch(\"http://localhost:7777/games/\".concat(this.state.gameID), {\n        method: 'PATCH',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \".concat(localStorage.getItem('jwt'))\n        },\n        body: JSON.stringify({\n          percentage: perRight\n        })\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          wpm: data.wpm,\n          finished: true,\n          currentWord: \" \",\n          renderRemainingWords: \"\",\n          finishedWords: \"\"\n        });\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n    };\n\n    this.handleStartGame = () => {\n      let tempID = 0;\n      fetch('http://localhost:7777/challenges/random', {\n        method: 'GET',\n        headers: {\n          Authorization: \"Bearer \".concat(localStorage.getItem('jwt')),\n          categoryheader: this.state.chosenCategory\n        }\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          challengeID: data.id,\n          challengeCategory: data.category,\n          challenge: data.paragraph,\n          renderRemainingWords: data.paragraph.split(\" \").map((word, index) => {\n            if (index != 0) {\n              return word;\n            }\n          }).join(\" \"),\n          allWords: data.paragraph.split(\" \"),\n          numAllWords: data.paragraph.split(\" \").length\n        });\n        fetch('http://localhost:7777/games', {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \".concat(localStorage.getItem('jwt'))\n          },\n          body: JSON.stringify({\n            user_id: this.props.location.state.user.id,\n            challenge_id: data.id\n          })\n        }).then(res => res.json()).then(data => {\n          this.setState({\n            gameID: data.id\n          });\n        });\n      });\n    };\n\n    this.handleCategoryChange = e => {\n      this.setState({\n        chosenCategory: e.target.value\n      }); //render paragraph based on the selected category, default paragraphs from all category\n    };\n\n    this.handleNewgame = () => {\n      this.setState({\n        newGame: true\n      });\n    };\n\n    this.state = {\n      challengeID: '',\n      challengeCategory: '',\n      challenge: '',\n      input: '',\n      index: null,\n      characAt: \"\",\n      allWords: [],\n      numAllWords: 0,\n      percentage: 0,\n      errorNumber: 0,\n      wordFlag: false,\n      finished: false,\n      chosenCategory: \"all\",\n      gameID: null,\n      wpm: null,\n      currWordCorrect: \"Yellow\",\n      currentWord: null,\n      finishedWords: [],\n      renderRemainingWords: \"\",\n      newGame: false\n    };\n  }\n\n  render() {\n    //percentage finished of the paragraph\n    const width = this.state.percentage - 7 + \"%\";\n    return React.createElement(\"div\", {\n      id: \"newgame-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      user: this.props.location.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"newgame-container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"category-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Category: \"), React.createElement(\"select\", {\n      className: \"category\",\n      onChange: this.handleCategoryChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"All\"), React.createElement(\"option\", {\n      value: \"dracula\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Dracula\"), React.createElement(\"option\", {\n      value: \"peterpan\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Peter Pan\")), React.createElement(\"button\", {\n      className: \"start-button\",\n      onClick: this.handleStartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Start\")), React.createElement(\"div\", {\n      className: \"newgame-container3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"percentage-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"avatar-image\",\n      style: {\n        marginLeft: width\n      },\n      src: this.props.location.state.user.avatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      className: \"inputcontainer\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: \"green\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.finishedWords), React.createElement(\"span\", {\n      style: {\n        color: this.state.currWordCorrect\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.currentWord), React.createElement(\"span\", {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.currentWord ? this.state.renderRemainingWords : this.state.challenge)), React.createElement(\"input\", {\n      className: \"typeinput\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      style: {\n        visibility: this.state.finished ? \"visible\" : \"hidden\"\n      },\n      className: \"popup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"goodjob\",\n      src: \"https://media.giphy.com/media/3o7abGQa0aRJUurpII/giphy.gif\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      className: \"font\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Good Job \", this.props.location.state.user.username, \"!\"), React.createElement(\"h3\", {\n      className: \"font\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Words Per Minute: \", this.state.wpm), React.createElement(\"button\", {\n      className: \"newgame-button\",\n      onClick: this.handleNewgame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"New Game\"), this.state.newGame ? React.createElement(Redirect, {\n      to: {\n        pathname: \"/game\",\n        state: {\n          user: this.props.location.state.user\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/philipsterling/flatiron/Mod4/Week-11/TaBTypeRacer/tab-type-racer-front-end/src/containers/GameContainer.js"],"names":["React","Nav","Route","Redirect","GameContainer","Component","constructor","componentDidMount","handleChange","e","percentage","state","input","target","value","index","length","allWords","undefined","setState","currentWord","charAt","wordFlag","errorNumber","currWordCorrect","finishedWords","push","shift","newCurrent","renderRemainingWords","map","word","Math","floor","numAllWords","console","log","characAt","gameID","finishGame","perRight","challenge","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","then","res","json","data","wpm","finished","handleSubmit","preventDefault","handleStartGame","tempID","categoryheader","chosenCategory","challengeID","id","challengeCategory","category","paragraph","split","join","user_id","props","location","user","challenge_id","handleCategoryChange","handleNewgame","newGame","render","width","marginLeft","avatar","color","visibility","username","pathname"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Nav from './Nav';\nimport \"../css/gamecontainer.css\";\nimport { Route, Redirect} from 'react-router'\n\nclass GameContainer extends React.Component {\n  constructor () {\n    super()\n    this.state={\n      challengeID: '',\n      challengeCategory: '',\n      challenge: '',\n      input: '',\n      index: null,\n      characAt: \"\",\n      allWords: [],\n      numAllWords: 0,\n      percentage: 0,\n      errorNumber: 0,\n      wordFlag: false,\n      finished: false,\n      chosenCategory: \"all\",\n      gameID: null,\n      wpm: null,\n      currWordCorrect: \"Yellow\",\n      currentWord: null,\n      finishedWords: [],\n      renderRemainingWords: \"\",\n      newGame: false\n\n    }\n  }\n\n  componentDidMount = () => {\n  }\n\n\n  handleChange = (e) => {\n    let percentage = this.state.percentage\n    let input = e.target.value\n    let index = input.length -1\n    if(this.state.allWords[0] !==  undefined){\n      this.setState({currentWord: this.state.allWords[0]+ \" \"})\n      if(index !== -1){\n        if(input != \"\"){\n          if(this.state.allWords[0].charAt(index) != input.charAt(input.length-1) && input != this.state.allWords[0] + \" \") {\n            if(!this.state.wordFlag){\n            this.setState({errorNumber: ++this.state.errorNumber,\n            wordFlag: true,\n            currWordCorrect: \"red\"})}\n          }\n        }\n      }\n      if(input == this.state.allWords[0] + \" \" || (this.state.allWords.length == 1 && input == this.state.allWords[0])){\n        this.state.finishedWords.push(this.state.allWords.shift() + \" \")\n        let newCurrent;\n        if (this.state.allWords.length == 0) {newCurrent = \" \" } else {newCurrent = this.state.allWords[0] + \" \" }\n        this.setState({renderRemainingWords: this.state.allWords.map((word,index) => {\n          if(index != 0){\n          return word + \" \"\n          }\n        }),\n        currentWord: newCurrent})\n        percentage = Math.floor(((this.state.numAllWords - this.state.allWords.length) / this.state.numAllWords) * 104)\n        console.log(percentage)\n        this.setState({allWords: this.state.allWords,\n          wordFlag: false,\n          currWordCorrect: \"yellow\",\n        })\n        input = \"\"\n        index = -1 \n\n      }\n      if(this.state.allWords[0] !== undefined){\n      this.setState({\n        input,\n        index,\n        characAt: this.state.allWords[0].charAt(index),\n        percentage\n      })\n    }\n    }\n    if(this.state.allWords.length == 0 && this.state.gameID != null){\n\n      this.finishGame()\n    }\n  }\n\n  finishGame = () => {\n    let perRight = 100 - ((this.state.errorNumber / this.state.numAllWords) * 100)\n    this.setState({input: \"\", challenge: \"\"})\n    fetch(`http://localhost:7777/games/${this.state.gameID}`, {\n      method: 'PATCH',\n      headers: {\"Content-Type\": \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${localStorage.getItem('jwt')}`\n    },\n    body: JSON.stringify({\n      percentage: perRight\n    })\n    }).then(res => res.json()).then(data => {\n      this.setState({wpm: data.wpm, finished: true, currentWord: \" \", renderRemainingWords: \"\", finishedWords: \"\"})\n    })\n  }\n\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n  }\n\n  handleStartGame = () => {\n    let tempID = 0;\n    fetch('http://localhost:7777/challenges/random', {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        categoryheader: this.state.chosenCategory\n      }\n    })\n    .then(res => res.json())\n    .then(data => {this.setState({\n      challengeID: data.id,\n      challengeCategory: data.category,\n      challenge: data.paragraph,\n      renderRemainingWords: data.paragraph.split(\" \").map((word,index) => {\n        if(index != 0) {\n          return word\n        }\n      }).join(\" \"),\n      allWords: data.paragraph.split(\" \"),\n      numAllWords: data.paragraph.split(\" \").length,\n    })\n      fetch('http://localhost:7777/games', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n     },\n     body: JSON.stringify({\n        user_id: this.props.location.state.user.id,\n        challenge_id: data.id,\n      })\n    }).then(res => res.json()).then(data => {\n      this.setState({gameID: data.id})})\n  })\n  }\n\n  handleCategoryChange = (e) => {\n    this.setState({chosenCategory: e.target.value})\n    //render paragraph based on the selected category, default paragraphs from all category\n  }\n\n  handleNewgame = () => {\n    this.setState({\n      newGame: true\n    })\n  }\n\n  render() {\n    //percentage finished of the paragraph\n    const width = (this.state.percentage - 7) + \"%\";\n    return (\n      <div id=\"newgame-container\">\n        <Nav user={this.props.location.state.user} />\n\n        <div className=\"newgame-container2\">\n          <div className=\"category-container\">\n            <label>Category: </label>\n            <select\n              className=\"category\"\n              onChange={this.handleCategoryChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"dracula\">Dracula</option>\n              <option value=\"peterpan\">Peter Pan</option>\n            </select>\n            <button className=\"start-button\" onClick={this.handleStartGame}>Start</button>\n          </div>\n          <div className=\"newgame-container3\">\n            <div className=\"percentage-container\">\n              <img\n                className=\"avatar-image\"\n                style={{ marginLeft: width }}\n                src={this.props.location.state.user.avatar}\n              />\n            </div>\n            <form className=\"inputcontainer\" onSubmit={this.handleSubmit}>\n              {<p><span style={{color: \"green\"}}>{this.state.finishedWords}</span><span style={{color: this.state.currWordCorrect}}>{this.state.currentWord}</span><span style={{color: \"white\"}}>{this.state.currentWord ? this.state.renderRemainingWords : this.state.challenge}</span></p> }\n\n              <input\n                className=\"typeinput\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.input}\n              />\n            </form>\n          </div>\n        </div>\n\n        {/*pop up component */}\n        <div\n          style={{\n            visibility: this.state.finished ? \"visible\" : \"hidden\"\n          }}\n          className=\"popup\"\n        >\n          <img\n            className=\"goodjob\"\n            src=\"https://media.giphy.com/media/3o7abGQa0aRJUurpII/giphy.gif\"\n          />\n          <h3 className=\"font\">Good Job {this.props.location.state.user.username}!</h3>\n          <h3 className=\"font\">Words Per Minute: {this.state.wpm}</h3>\n          <button className=\"newgame-button\" onClick={this.handleNewgame}>\n            New Game\n          </button>\n          {this.state.newGame ? (\n            <Redirect\n              to={{\n                pathname: \"/game\",\n                state: { user: this.props.location.state.user }\n              }}\n            />\n          ) : null}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameContainer;\n"]},"metadata":{},"sourceType":"module"}